import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  foods: {
    menuItems:[],
    totalMenuItems:0,
  },
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getFetchFood = createAsyncThunk(
  'counter/fetchFoods',
  async (offset) => {
    const url = 'https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/food/menuItems/search?query=burger&offset='+offset+'&number=10&minCalories=0&maxCalories=5000&minProtein=0&maxProtein=100&minFat=0&maxFat=100&minCarbs=0&maxCarbs=100';

    const options = {
      method: 'GET',
      headers: {
        'X-RapidAPI-Host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',
        'X-RapidAPI-Key': '96a28a34a5msh98fc77af7757a18p1d9573jsn85285377c64f'
      }
      
    };
    const response = await fetch(url, options)
    .then(res => res.json())
    .then(json => json)
    .catch(err => console.error('error:' + err));
    // // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getFetchFood.pending, (state) => {
        state.status = 'loading';
        console.log("loading")
      })
      .addCase(getFetchFood.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("finished",action)
        state.foods = action.payload;
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const foodData = (state) => state.counter.foods;


export default counterSlice.reducer;
